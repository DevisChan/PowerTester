// Generated by CoffeeScript 1.7.1
(function() {
  var Connection, myDB;

  myDB = (function() {
    function myDB(dbName) {
      var createTable;
      this.dbName = dbName;
      this.db = window.openDatabase(this.dbName, "1.0", "Test DB", 1000000);
      createTable = function(tx) {
        tx.executeSql('CREATE TABLE IF NOT EXISTS subject (id INTEGER PRIMARY KEY AUTOINCREMENT, on_erver BOOLEAN DEFAULT 0, server_id INTEGER, name VARCHAR(255) NOT NULL)');
        tx.executeSql('CREATE TABLE IF NOT EXISTS item (id INTEGER PRIMARY KEY AUTOINCREMENT, content TEXT NOT NULL, uploaded BOOLEAN DEFAULT 0, good INTEGER DEFAULT 0, bad INTEGER DEFAULT 0, server_id INTEGER, subject_id INTEGER, FOREIGN KEY(subject_id) REFERENCES subject(id))');
        tx.executeSql('CREATE TABLE IF NOT EXISTS kv (key TEXT PRIMARY KEY, value TEXT NOT NULL)');
        tx.executeSql('INSERT INTO kv (key,value) VALUES (?,?)', ['version', '0.1'], null, (function(_this) {
          return function() {
            return tx.executeSql('UPDATE kv SET value=? WHERE key=?', ['0.1', 'version']);
          };
        })(this));
        return tx.executeSql('INSERT INTO kv (key,value) VALUES (?,?)', ['version_code', 'dev'], null, (function(_this) {
          return function() {
            return tx.executeSql('UPDATE kv SET value=? WHERE key=?', ['dev', 'version_code']);
          };
        })(this));
      };
      this.db.transaction(createTable);
    }

    myDB.prototype.addItem = function(itemName, itemContent) {
      this.itemName = itemName;
      this.itemContent = itemContent;
      return this.db.transaction((function(_this) {
        return function(tx) {
          return tx.executeSql("SELECT * FROM subject WHERE name = ?", [_this.itemName], function(tx, results) {
            var sid;
            if (results.rows.length === 0) {
              _this.db.transaction(function(tx) {
                return tx.executeSql('INSERT INTO subject (name) VALUES ("' + _this.itemName + '")');
              });
              return _this.addItem(_this.itemName, _this.itemContent);
            } else {
              sid = results.rows.item(0)['id'];
              return tx.executeSql("INSERT INTO item (content, subject_id) VALUES (?,?)", [_this.itemContent, sid], function(tx, results) {
                return alert('添加成功');
              });
            }
          }, function(error) {
            console.log('query subject error');
            return console.log(error);
          });
        };
      })(this));
    };

    myDB.prototype.showRandomItemFromName = function(itemName, func) {
      this.itemName = itemName;
      this.func = func;
      return this.db.transaction((function(_this) {
        return function(tx) {
          return tx.executeSql('SELECT * FROM item,subject WHERE item.subject_id=subject.id AND subject.name = ?', [_this.itemName], function(tx, results) {
            var RanNum, chosen_item, length;
            length = results.rows.length;
            RanNum = Math.floor(Math.random() * length);
            chosen_item = results.rows.item(RanNum);
            return func(chosen_item);
          }, function() {
            return alert('数据库查询错误');
          });
        };
      })(this));
    };

    myDB.prototype.showAllSubject = function(func) {
      this.func = func;
      return this.db.transaction((function(_this) {
        return function(tx) {
          return tx.executeSql("SELECT * FROM subject", [], function(tx, results) {
            var length, num, r, _i;
            if (results.rows.length !== 0) {
              r = [];
              length = results.rows.length - 1;
              for (num = _i = 0; 0 <= length ? _i <= length : _i >= length; num = 0 <= length ? ++_i : --_i) {
                r.push(results.rows.item(num));
              }
              return _this.func(r);
            }
          });
        };
      })(this));
    };

    myDB.prototype.createFromServer = function(subject, data) {
      var insertInto;
      this.subject = subject;
      this.data = data;
      insertInto = (function(_this) {
        return function(db, sub, data, cur) {
          _this.db = db;
          _this.sub = sub;
          _this.data = data;
          _this.cur = cur;
          if (_this.cur >= _this.data.length) {
            alert('导入完毕');
            window.location.href = '';
            return;
          }
          _this.obj = _this.data[_this.cur];
          return _this.db.transaction(function(tx) {
            return tx.executeSql("SELECT * FROM subject WHERE name=?", [_this.sub], function(tx, results) {
              if (results.rows.length === 0) {
                tx.executeSql("INSERT INTO subject (name) VALUES (?)", [_this.sub]);
                return _this.createFromServer(_this.sub, data);
              } else {
                console.log(_this.obj);
                sub = results.rows.item(0);
                return tx.executeSql("INSERT INTO item (server_id,good,bad,content,subject_id) VALUES (?,?,?,?,?)", [_this.obj['id'], _this.obj['good'], _this.obj['bad'], _this.obj['content'], sub['id']], function() {
                  return insertInto(_this.db, _this.subject, _this.data, _this.cur + 1);
                });
              }
            });
          });
        };
      })(this);
      return insertInto(this.db, this.subject, this.data, 0);
    };

    return myDB;

  })();

  Connection = (function() {
    function Connection(main_server, db) {
      this.main_server = main_server;
      this.db = db;
    }

    Connection.prototype.importFromServer = function(name) {
      this.name = name;
      alert('正在导入，请稍后');
      return $.get(this.main_server + '/subject/' + this.name, (function(_this) {
        return function(data, Status) {
          var d, dd, subject;
          if (Status === 'success') {
            d = JSON.parse(data);
            dd = d['result'];
            subject = d['subject'];
            return _this.db.createFromServer(subject, dd);
          } else {
            return alert('无法连接到服务器');
          }
        };
      })(this));
    };

    Connection.prototype.showSubject = function(func) {
      this.func = func;
      console.log('begin download');
      return $.get(this.main_server + '/subject', (function(_this) {
        return function(data, status) {
          var d, sl;
          if (status === 'success') {
            console.log(data);
            d = JSON.parse(data);
            sl = d['subject_list'];
            return _this.func(sl);
          } else {
            return alert('请检查您的网络链接');
          }
        };
      })(this));
    };

    return Connection;

  })();

  this.myDB = myDB;

  this.Connection = Connection;

}).call(this);
